// CODELET:	gemm_tanh1
inputs=data['M', 'N'], weight['N', 'P'], bias['P']
intermediates=gemm_out['M', 'P']
outputs=out['M', 'P']
0	config0: start-systolic_array
1	config1: start-WBUF
2	config2: start-IBUF
3	config3: start-OBUF
4	config4: start-BBUF
5	(N)loop0[0]: START=0; STOP=256; STRIDE=256; OFFSET:0
6		(M)loop1[1]: START=0; STOP=2; STRIDE=1; OFFSET:0
7			transfer0: OPERAND: data[DRAM->IBUF], SIZES: [[2, 256], [1, 256]]
8			(P)loop2[2]: START=0; STOP=64; STRIDE=64; OFFSET:0
9				transfer3: OPERAND: gemm_out[DRAM->OBUF], SIZES: [[2, 64], [1, 64]]
10				transfer2: OPERAND: bias[DRAM->BBUF], SIZES: [[64], [64]]
11				transfer1: OPERAND: weight[DRAM->WBUF], SIZES: [[256, 64], [256, 64]]
12				(N)loop5[3]: START=0; STOP=256; STRIDE=1; OFFSET:0
13					(M)loop6[4]: START=0; STOP=1; STRIDE=1; OFFSET:0
14						(P)loop7[5]: START=0; STOP=64; STRIDE=1; OFFSET:0
15							compute0: pe_array-MVMUL(['data', 'weight', 'bias', 'gemm_out'])->['gemm_out']
16						loop7: END
17					loop6: END
18				loop5: END
19			loop2: END
20		loop1: END
21	loop0: END
22	config5: end-WBUF
23	config6: end-IBUF
24	config7: end-OBUF
25	config8: end-BBUF
26	config9: end-systolic_array
27	config10: start-SIMD
28	(M)loop3[0]: START=0; STOP=2; STRIDE=1; OFFSET:0
29		(P)loop4[1]: START=0; STOP=64; STRIDE=64; OFFSET:0
30			(M)loop8[2]: START=0; STOP=1; STRIDE=1; OFFSET:0
31				(P)loop9[3]: START=0; STOP=64; STRIDE=1; OFFSET:0
32					compute1: SIMD-TANH(['gemm_out'])->['out']
33				loop9: END
34			loop8: END
35			transfer4: OPERAND: out[VMEM1->DRAM], SIZES: [[1, 64], [2, 64]]
36		loop4: END
37	loop3: END
38	config11: end-SIMD
